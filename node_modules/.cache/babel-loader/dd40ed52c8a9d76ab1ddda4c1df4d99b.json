{"ast":null,"code":"var _jsxFileName = \"/Users/amethyst/black-hole-viewer/src/components/Graph.js\";\nimport React, { Component } from 'react';\nimport Chart from \"chart.js\";\nexport default class Graph extends Component {\n  constructor(...args) {\n    super(...args);\n    this.chartRef = React.createRef();\n  }\n\n  componentDidMount() {\n    let graph = this.props.graph;\n    graph = graph.split(/(\\s+)/).filter(value => {\n      return value.includes(\"e\") && value.length > 6;\n    });\n    graph.shift();\n    console.log(graph);\n    const myChartRef = this.chartRef.current.getContext(\"2d\");\n    new Chart(myChartRef, {\n      type: \"line\",\n      data: {\n        //Bring in data\n        labels: [\"0\", \"20\", \"200\"],\n        datasets: [{\n          fill: false,\n          label: \"NU\",\n          data: [86, 67, 91]\n        }, {\n          fill: false,\n          label: \"reflc\",\n          data: [86, 67, 91]\n        }]\n      },\n      options: {//Customize chart options\n      }\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(\"canvas\", {\n      id: \"myChart\",\n      ref: this.chartRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/amethyst/black-hole-viewer/src/components/Graph.js"],"names":["React","Component","Chart","Graph","chartRef","createRef","componentDidMount","graph","props","split","filter","value","includes","length","shift","console","log","myChartRef","current","getContext","type","data","labels","datasets","fill","label","options","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,UAAlB;AAGA,eAAe,MAAMC,KAAN,SAAoBF,SAApB,CAA8B;AAAA;AAAA;AAAA,SACzCG,QADyC,GAC9BJ,KAAK,CAACK,SAAN,EAD8B;AAAA;;AAGzCC,EAAAA,iBAAiB,GAAG;AAClB,QAAIC,KAAK,GAAG,KAAKC,KAAL,CAAWD,KAAvB;AACAA,IAAAA,KAAK,GAAGA,KAAK,CAACE,KAAN,CAAY,OAAZ,EAAqBC,MAArB,CAA6BC,KAAD,IAAW;AAC7C,aAAOA,KAAK,CAACC,QAAN,CAAe,GAAf,KAAuBD,KAAK,CAACE,MAAN,GAAe,CAA7C;AACD,KAFO,CAAR;AAGAN,IAAAA,KAAK,CAACO,KAAN;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYT,KAAZ;AACE,UAAMU,UAAU,GAAG,KAAKb,QAAL,CAAcc,OAAd,CAAsBC,UAAtB,CAAiC,IAAjC,CAAnB;AAEA,QAAIjB,KAAJ,CAAUe,UAAV,EAAsB;AAClBG,MAAAA,IAAI,EAAE,MADY;AAElBC,MAAAA,IAAI,EAAE;AACF;AACAC,QAAAA,MAAM,EAAE,CAAC,GAAD,EAAM,IAAN,EAAY,KAAZ,CAFN;AAGFC,QAAAA,QAAQ,EAAE,CACN;AACEC,UAAAA,IAAI,EAAE,KADR;AAEIC,UAAAA,KAAK,EAAE,IAFX;AAGIJ,UAAAA,IAAI,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT;AAHV,SADM,EAMN;AACEG,UAAAA,IAAI,EAAE,KADR;AAEEC,UAAAA,KAAK,EAAE,OAFT;AAGEJ,UAAAA,IAAI,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT;AAHR,SANM;AAHR,OAFY;AAkBlBK,MAAAA,OAAO,EAAE,CACL;AADK;AAlBS,KAAtB;AAsBH;;AACDC,EAAAA,MAAM,GAAG;AACL,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AACI,MAAA,EAAE,EAAC,SADP;AAEI,MAAA,GAAG,EAAE,KAAKvB,QAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ;AAQH;;AA5CwC","sourcesContent":["import React, { Component } from 'react'\nimport Chart from \"chart.js\";\n\n\nexport default class Graph extends Component {\n    chartRef = React.createRef();\n\n    componentDidMount() {\n      let graph = this.props.graph\n      graph = graph.split(/(\\s+)/).filter((value) => {\n        return value.includes(\"e\") && value.length > 6\n      })\n      graph.shift()\n      console.log(graph)\n        const myChartRef = this.chartRef.current.getContext(\"2d\");\n\n        new Chart(myChartRef, {\n            type: \"line\",\n            data: {\n                //Bring in data\n                labels: [\"0\", \"20\", \"200\"],\n                datasets: [\n                    {\n                      fill: false,\n                        label: \"NU\",\n                        data: [86, 67, 91],\n                    },\n                    {\n                      fill: false,\n                      label: \"reflc\",\n                      data: [86, 67, 91],\n                    }\n                ]\n            },\n            options: {\n                //Customize chart options\n            }\n        });\n    }\n    render() {\n        return (\n            <div >\n                <canvas\n                    id=\"myChart\"\n                    ref={this.chartRef}\n                />\n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}