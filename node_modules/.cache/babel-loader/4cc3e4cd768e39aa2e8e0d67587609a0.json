{"ast":null,"code":"import _defineProperty from \"/Users/amethyst/black-hole-viewer/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/amethyst/black-hole-viewer/src/components/Graph1.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport Chart from \"react-google-charts\";\nexport default class Graph extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: [],\n      max_x: null,\n      max_y: null,\n      min_x: null,\n      min_y: null\n    };\n  }\n\n  componentDidMount() {\n    // filter out data that will not be graphed\n    let graph = this.props.graph;\n    graph = graph.split(/(\\s+)/).filter(value => {\n      return value.includes(\"e\") && value.length > 6;\n    });\n    graph.shift();\n    console.log(graph); // extract data that will be graphed\n\n    let data_set = [];\n    let data_point = {};\n    let counter = 0;\n    let nu_counter = 0;\n    let total_counter = 6;\n    let max_x = 0;\n    let min_x = graph[0];\n    let min_y = graph[6];\n    let max_y = 0;\n    graph.forEach(value => {\n      if (counter - nu_counter === 0) {\n        nu_counter += 9;\n        data_point.x = Number(value);\n\n        if (Number(value) > max_x) {\n          max_x = Number(value);\n        }\n\n        if (Number(value) < min_x) {\n          min_x = Number(value);\n        }\n      }\n\n      if (counter - total_counter === 0) {\n        total_counter += 9;\n        data_point.y = Number(value);\n        data_set.push([data_point.x, data_point.y]);\n        data_point = {};\n\n        if (Number(value) > max_y) {\n          max_y = Number(value);\n        }\n\n        if (Number(value) < min_y) {\n          min_y = Number(value);\n        }\n      }\n\n      counter++;\n    }); // console.log(data_set)\n\n    this.setState(_objectSpread({}, this.state, {\n      data: data_set,\n      max_x: max_x,\n      max_y: max_y,\n      min_x: min_x,\n      min_y: min_y\n    }));\n  }\n\n  render() {\n    return React.createElement(Chart, {\n      chartType: \"LineChart\",\n      loader: React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, \"Loading Chart\"),\n      data: [['Cont nu', 'Total'], ...this.state.data],\n      options: {\n        intervals: {\n          style: 'sticks'\n        },\n        chartArea: {\n          width: '40%'\n        },\n        hAxis: {\n          title: 'Total',\n          scaleType: 'log',\n          format: 'scientific'\n        },\n        vAxis: {\n          title: 'Cont nu',\n          scaleType: 'log',\n          format: 'scientific'\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/amethyst/black-hole-viewer/src/components/Graph1.js"],"names":["React","Component","Chart","Graph","state","data","max_x","max_y","min_x","min_y","componentDidMount","graph","props","split","filter","value","includes","length","shift","console","log","data_set","data_point","counter","nu_counter","total_counter","forEach","x","Number","y","push","setState","render","intervals","style","chartArea","width","hAxis","title","scaleType","format","vAxis"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Chart from \"react-google-charts\"\n\nexport default class Graph extends Component {\n    state = {\n      data: [],\n      max_x: null,\n      max_y: null,\n      min_x: null,\n      min_y: null\n    }\n\n    componentDidMount() {\n      // filter out data that will not be graphed\n      let graph = this.props.graph\n      graph = graph.split(/(\\s+)/).filter((value) => {\n        return value.includes(\"e\") && value.length > 6\n      })\n      graph.shift()\n      console.log(graph)\n      // extract data that will be graphed\n      let data_set = []\n      let data_point = {}\n      let counter = 0\n      let nu_counter = 0\n      let total_counter = 6\n      let max_x = 0\n      let min_x = graph[0]\n      let min_y = graph[6]\n      let max_y = 0\n      graph.forEach((value) => {\n        if(counter - nu_counter === 0) {\n          nu_counter += 9\n          data_point.x = Number(value)\n          if(Number(value) > max_x) {\n            max_x = Number(value)\n          }\n          if(Number(value) < min_x) {\n            min_x = Number(value)\n          }\n        }\n        if(counter - total_counter === 0) {\n          total_counter += 9\n          data_point.y = Number(value)\n          data_set.push([data_point.x, data_point.y])\n          data_point = {}\n          if(Number(value) > max_y) {\n            max_y = Number(value)\n          }\n          if(Number(value) < min_y) {\n            min_y = Number(value)\n          }\n        }\n        counter ++\n      })\n      // console.log(data_set)\n      this.setState({...this.state, data: data_set, max_x: max_x, max_y: max_y, min_x: min_x, min_y: min_y})\n    }\n\n    render() {\n        return (\n            <Chart\n    chartType=\"LineChart\"\n    loader={<div>Loading Chart</div>}\n    data={[\n      ['Cont nu', 'Total'],\n      ...this.state.data\n    ]}\n    options={{\n      intervals: { style: 'sticks' },\n      \n      chartArea: { width: '40%' },\n      hAxis: {\n        title: 'Total',\n        scaleType: 'log',\n        format: 'scientific'\n      },\n      vAxis: {\n        title: 'Cont nu',\n        scaleType: 'log',\n        format: 'scientific'\n      },\n    }}\n\n  />\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}