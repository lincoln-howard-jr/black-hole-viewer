{"ast":null,"code":"var _jsxFileName = \"/Users/amethyst/black-hole-viewer/src/components/Graph.js\";\nimport React, { Component } from 'react';\nimport { Button } from 'semantic-ui-react';\n\nclass Graph extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.readText2 = file => {\n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', file, true); // If specified, responseType must be empty string or \"text\"\n\n      xhr.responseType = 'text';\n\n      xhr.onload = function () {\n        if (xhr.readyState === xhr.DONE) {\n          if (xhr.status === 200) {\n            // console.log(xhr.responseText);\n            return xhr.responseText;\n          }\n        }\n      };\n\n      xhr.send(null);\n    };\n\n    this.renderButton = () => {\n      if (this.props.selection.length > 0) {\n        // Create file name from selection\n        let zeros = 9 - Number(this.props.selection[0]);\n        let file = \"grid\" + \"0\".repeat(zeros);\n\n        if (this.props.selection[2] === \"1\") {\n          file += \"_Z_1_n_\";\n        } else {\n          file += \"_Z_0p1_n_\";\n        }\n\n        file += this.props.selection[3] + \"_\" + this.props.selection[1] + \"per.con\"; // Read file contents for graph\n\n        let xhr = new XMLHttpRequest();\n        return React.createElement(\"a\", {\n          href: \"data/\" + file,\n          download: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57\n          },\n          __self: this\n        }, React.createElement(Button, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58\n          },\n          __self: this\n        }, \"Download Configuration File\"));\n      } else {\n        return null;\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, this.renderButton());\n  }\n\n}\n\nexport default Graph;","map":{"version":3,"sources":["/Users/amethyst/black-hole-viewer/src/components/Graph.js"],"names":["React","Component","Button","Graph","readText2","file","xhr","XMLHttpRequest","open","responseType","onload","readyState","DONE","status","responseText","send","renderButton","props","selection","length","zeros","Number","repeat","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAAQC,MAAR,QAAqB,mBAArB;;AACA,MAAMC,KAAN,SAAoBF,SAApB,CAA8B;AAAA;AAAA;;AAAA,SAqB5BG,SArB4B,GAqBhBC,IAAI,IAAI;AAClB,UAAIC,GAAG,GAAG,IAAIC,cAAJ,EAAV;AACAD,MAAAA,GAAG,CAACE,IAAJ,CAAS,KAAT,EAAgBH,IAAhB,EAAuB,IAAvB,EAFkB,CAIlB;;AACAC,MAAAA,GAAG,CAACG,YAAJ,GAAmB,MAAnB;;AAEAH,MAAAA,GAAG,CAACI,MAAJ,GAAa,YAAY;AACvB,YAAIJ,GAAG,CAACK,UAAJ,KAAmBL,GAAG,CAACM,IAA3B,EAAiC;AAC7B,cAAIN,GAAG,CAACO,MAAJ,KAAe,GAAnB,EAAwB;AACtB;AACE,mBAAOP,GAAG,CAACQ,YAAX;AACD;AACF;AACF,OAPL;;AASIR,MAAAA,GAAG,CAACS,IAAJ,CAAS,IAAT;AACH,KAtCyB;;AAAA,SAwC5BC,YAxC4B,GAwCb,MAAM;AACnB,UAAG,KAAKC,KAAL,CAAWC,SAAX,CAAqBC,MAArB,GAA8B,CAAjC,EAAmC;AACjC;AACA,YAAIC,KAAK,GAAG,IAAIC,MAAM,CAAC,KAAKJ,KAAL,CAAWC,SAAX,CAAqB,CAArB,CAAD,CAAtB;AACA,YAAIb,IAAI,GAAG,SAAS,IAAIiB,MAAJ,CAAWF,KAAX,CAApB;;AACA,YAAG,KAAKH,KAAL,CAAWC,SAAX,CAAqB,CAArB,MAA4B,GAA/B,EAAoC;AAClCb,UAAAA,IAAI,IAAI,SAAR;AACD,SAFD,MAEO;AACLA,UAAAA,IAAI,IAAI,WAAR;AACD;;AACDA,QAAAA,IAAI,IAAI,KAAKY,KAAL,CAAWC,SAAX,CAAqB,CAArB,IAA0B,GAA1B,GAAgC,KAAKD,KAAL,CAAWC,SAAX,CAAqB,CAArB,CAAhC,GAA0D,SAAlE,CATiC,CAUjC;;AACA,YAAIZ,GAAG,GAAG,IAAIC,cAAJ,EAAV;AAEA,eAAO;AAAG,UAAA,IAAI,EAAE,UAAUF,IAAnB;AAAyB,UAAA,QAAQ,MAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACP,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCADO,CAAP;AAKD,OAlBD,MAkBK;AACH,eAAO,IAAP;AACD;AACF,KA9D2B;AAAA;;AA+D5BkB,EAAAA,MAAM,GAAG;AACP,WACE,0CAAG,KAAKP,YAAL,EAAH,CADF;AAGD;;AAnE2B;;AAuE9B,eAAeb,KAAf","sourcesContent":["import React, { Component } from 'react';\nimport {Button} from 'semantic-ui-react'\nclass Graph extends Component {\n  // <a href=\"/favicon.ico\" download >\n  // download\n  // </a>\n  //\n  //\n\n  // readTextFile = file => {\n  //       var rawFile = new XMLHttpRequest();\n  //       rawFile.open(\"GET\", file, false);\n  //       rawFile.onreadystatechange = () => {\n  //           if (rawFile.readyState === 4) {\n  //               if (rawFile.status === 200 || rawFile.status == 0) {\n  //                   var allText = rawFile.responseText;\n  //                   console.log(\"allText: \", allText);\n  //               }\n  //           }\n  //       };\n  //       rawFile.send(null);\n  //   };\n\n  readText2 = file => {\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', file , true);\n\n    // If specified, responseType must be empty string or \"text\"\n    xhr.responseType = 'text';\n\n    xhr.onload = function () {\n      if (xhr.readyState === xhr.DONE) {\n          if (xhr.status === 200) {\n            // console.log(xhr.responseText);\n              return xhr.responseText\n            }\n          }\n        }\n\n        xhr.send(null);\n    }\n\n  renderButton = () => {\n    if(this.props.selection.length > 0){\n      // Create file name from selection\n      let zeros = 9 - Number(this.props.selection[0])\n      let file = \"grid\" + \"0\".repeat(zeros)\n      if(this.props.selection[2] === \"1\") {\n        file += \"_Z_1_n_\"\n      } else {\n        file += \"_Z_0p1_n_\"\n      }\n      file += this.props.selection[3] + \"_\" + this.props.selection[1] + \"per.con\"\n      // Read file contents for graph\n      let xhr = new XMLHttpRequest();\n\n      return <a href={\"data/\" + file} download >\n      <Button>\n      Download Configuration File\n      </Button>\n      </a>\n    }else{\n      return null\n    }\n  }\n  render() {\n    return (\n      <>{this.renderButton()}</>\n    );\n  }\n\n}\n\nexport default Graph;\n"]},"metadata":{},"sourceType":"module"}