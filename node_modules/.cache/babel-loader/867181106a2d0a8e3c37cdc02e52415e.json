{"ast":null,"code":"var _jsxFileName = \"/Users/amethyst/black-hole-viewer/src/components/Graph.js\";\nimport React, { Component } from 'react';\nimport Chart from \"chart.js\";\nexport default class Graph extends Component {\n  constructor(...args) {\n    super(...args);\n    this.chartRef = React.createRef();\n  }\n\n  componentDidMount() {\n    // filter out data that will not be graphed\n    let graph = this.props.graph;\n    graph = graph.split(/(\\s+)/).filter(value => {\n      return value.includes(\"e\") && value.length > 6;\n    });\n    graph.shift(); // extract data that will be graphed\n\n    let nu = [];\n    let reflc = [];\n    let counter = 0;\n    let nu_counter = 1;\n    let total_counter = 7;\n    graph.forEach(value => {\n      if (counter - nu_counter === 0) {\n        nu_counter += 9;\n        nu.push(Number(value));\n      }\n\n      if (counter - total_counter === 0) {\n        total_counter += 9;\n        total.push(Number(value));\n      }\n\n      counter++;\n    });\n    console.log(nu);\n    console.log(total);\n    const myChartRef = this.chartRef.current.getContext(\"2d\");\n    new Chart(myChartRef, {\n      type: \"line\",\n      data: {\n        //Bring in data\n        datasets: [{\n          fill: false,\n          label: \"NU\",\n          data: nu\n        }, {\n          fill: false,\n          label: \"REFLC\",\n          data: reflc\n        }]\n      },\n      options: {\n        scales: {\n          xAxes: [{\n            display: true,\n            type: 'logarithmic'\n          }],\n          yAxes: [{\n            display: true,\n            type: 'logarithmic'\n          }]\n        }\n      }\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(\"canvas\", {\n      id: \"myChart\",\n      ref: this.chartRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/amethyst/black-hole-viewer/src/components/Graph.js"],"names":["React","Component","Chart","Graph","chartRef","createRef","componentDidMount","graph","props","split","filter","value","includes","length","shift","nu","reflc","counter","nu_counter","total_counter","forEach","push","Number","total","console","log","myChartRef","current","getContext","type","data","datasets","fill","label","options","scales","xAxes","display","yAxes","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,UAAlB;AAGA,eAAe,MAAMC,KAAN,SAAoBF,SAApB,CAA8B;AAAA;AAAA;AAAA,SACzCG,QADyC,GAC9BJ,KAAK,CAACK,SAAN,EAD8B;AAAA;;AAGzCC,EAAAA,iBAAiB,GAAG;AAClB;AACA,QAAIC,KAAK,GAAG,KAAKC,KAAL,CAAWD,KAAvB;AACAA,IAAAA,KAAK,GAAGA,KAAK,CAACE,KAAN,CAAY,OAAZ,EAAqBC,MAArB,CAA6BC,KAAD,IAAW;AAC7C,aAAOA,KAAK,CAACC,QAAN,CAAe,GAAf,KAAuBD,KAAK,CAACE,MAAN,GAAe,CAA7C;AACD,KAFO,CAAR;AAGAN,IAAAA,KAAK,CAACO,KAAN,GANkB,CAOlB;;AACA,QAAIC,EAAE,GAAG,EAAT;AACA,QAAIC,KAAK,GAAG,EAAZ;AACA,QAAIC,OAAO,GAAG,CAAd;AACA,QAAIC,UAAU,GAAG,CAAjB;AACA,QAAIC,aAAa,GAAG,CAApB;AACAZ,IAAAA,KAAK,CAACa,OAAN,CAAeT,KAAD,IAAW;AACvB,UAAGM,OAAO,GAAGC,UAAV,KAAyB,CAA5B,EAA+B;AAC7BA,QAAAA,UAAU,IAAI,CAAd;AACAH,QAAAA,EAAE,CAACM,IAAH,CAAQC,MAAM,CAACX,KAAD,CAAd;AACD;;AACD,UAAGM,OAAO,GAAGE,aAAV,KAA4B,CAA/B,EAAkC;AAChCA,QAAAA,aAAa,IAAI,CAAjB;AACAI,QAAAA,KAAK,CAACF,IAAN,CAAWC,MAAM,CAACX,KAAD,CAAjB;AACD;;AACDM,MAAAA,OAAO;AACR,KAVD;AAWAO,IAAAA,OAAO,CAACC,GAAR,CAAYV,EAAZ;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACE,UAAMG,UAAU,GAAG,KAAKtB,QAAL,CAAcuB,OAAd,CAAsBC,UAAtB,CAAiC,IAAjC,CAAnB;AAEA,QAAI1B,KAAJ,CAAUwB,UAAV,EAAsB;AAClBG,MAAAA,IAAI,EAAE,MADY;AAElBC,MAAAA,IAAI,EAAE;AACF;AACAC,QAAAA,QAAQ,EAAE,CACN;AACEC,UAAAA,IAAI,EAAE,KADR;AAEIC,UAAAA,KAAK,EAAE,IAFX;AAGIH,UAAAA,IAAI,EAAEf;AAHV,SADM,EAMN;AACEiB,UAAAA,IAAI,EAAE,KADR;AAEEC,UAAAA,KAAK,EAAE,OAFT;AAGEH,UAAAA,IAAI,EAAEd;AAHR,SANM;AAFR,OAFY;AAiBlBkB,MAAAA,OAAO,EAAE;AACLC,QAAAA,MAAM,EAAE;AACNC,UAAAA,KAAK,EAAE,CAAC;AACNC,YAAAA,OAAO,EAAE,IADH;AAENR,YAAAA,IAAI,EAAE;AAFA,WAAD,CADD;AAKNS,UAAAA,KAAK,EAAE,CAAC;AACND,YAAAA,OAAO,EAAE,IADH;AAENR,YAAAA,IAAI,EAAE;AAFA,WAAD;AALD;AADH;AAjBS,KAAtB;AA8BH;;AACDU,EAAAA,MAAM,GAAG;AACL,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AACI,MAAA,EAAE,EAAC,SADP;AAEI,MAAA,GAAG,EAAE,KAAKnC,QAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ;AAQH;;AAvEwC","sourcesContent":["import React, { Component } from 'react'\nimport Chart from \"chart.js\";\n\n\nexport default class Graph extends Component {\n    chartRef = React.createRef();\n\n    componentDidMount() {\n      // filter out data that will not be graphed\n      let graph = this.props.graph\n      graph = graph.split(/(\\s+)/).filter((value) => {\n        return value.includes(\"e\") && value.length > 6\n      })\n      graph.shift()\n      // extract data that will be graphed\n      let nu = []\n      let reflc = []\n      let counter = 0\n      let nu_counter = 1\n      let total_counter = 7\n      graph.forEach((value) => {\n        if(counter - nu_counter === 0) {\n          nu_counter += 9\n          nu.push(Number(value))\n        }\n        if(counter - total_counter === 0) {\n          total_counter += 9\n          total.push(Number(value))\n        }\n        counter ++\n      })\n      console.log(nu)\n      console.log(total)\n        const myChartRef = this.chartRef.current.getContext(\"2d\");\n\n        new Chart(myChartRef, {\n            type: \"line\",\n            data: {\n                //Bring in data\n                datasets: [\n                    {\n                      fill: false,\n                        label: \"NU\",\n                        data: nu,\n                    },\n                    {\n                      fill: false,\n                      label: \"REFLC\",\n                      data: reflc,\n                    }\n                ]\n            },\n            options: {\n                scales: {\n                  xAxes: [{\n                    display: true,\n                    type: 'logarithmic'\n                  }],\n                  yAxes: [{\n                    display: true,\n                    type: 'logarithmic'\n                  }]\n                }\n            }\n        });\n    }\n    render() {\n        return (\n            <div >\n                <canvas\n                    id=\"myChart\"\n                    ref={this.chartRef}\n                />\n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}