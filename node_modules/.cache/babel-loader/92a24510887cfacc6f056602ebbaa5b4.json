{"ast":null,"code":"var _jsxFileName = \"/Users/amethyst/black-hole-viewer/src/components/Graph.js\";\nimport React, { Component } from 'react';\nimport Chart from \"chart.js\";\nexport default class Graph extends Component {\n  constructor(...args) {\n    super(...args);\n    this.chartRef = React.createRef();\n  }\n\n  componentDidMount() {\n    // filter out data that will not be graphed\n    let graph = this.props.graph;\n    graph = graph.split(/(\\s+)/).filter(value => {\n      return value.includes(\"e\") && value.length > 6;\n    });\n    graph.shift(); // extract data that will be graphed\n\n    let data_set = [];\n    let data_point = {};\n    let counter = 0;\n    let nu_counter = 0;\n    let total_counter = 6;\n    graph.forEach(value => {\n      if (counter - nu_counter === 0) {\n        nu_counter += 9;\n        data_point.x = value;\n      }\n\n      if (counter - total_counter === 0) {\n        total_counter += 9;\n        data_point.y = value;\n        data_set.push(data_point);\n      }\n\n      counter++;\n    });\n    console.log(data_set);\n    const myChartRef = this.chartRef.current.getContext(\"2d\");\n    new Chart(myChartRef, {\n      type: \"scatter\",\n      data: {\n        datasets: [{}]\n      },\n      options: {\n        scales: {\n          xAxes: [{\n            display: true,\n            type: 'logarithmic'\n          }],\n          yAxes: [{\n            display: true,\n            type: 'logarithmic'\n          }]\n        }\n      }\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(\"canvas\", {\n      id: \"myChart\",\n      ref: this.chartRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/amethyst/black-hole-viewer/src/components/Graph.js"],"names":["React","Component","Chart","Graph","chartRef","createRef","componentDidMount","graph","props","split","filter","value","includes","length","shift","data_set","data_point","counter","nu_counter","total_counter","forEach","x","y","push","console","log","myChartRef","current","getContext","type","data","datasets","options","scales","xAxes","display","yAxes","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,UAAlB;AAGA,eAAe,MAAMC,KAAN,SAAoBF,SAApB,CAA8B;AAAA;AAAA;AAAA,SACzCG,QADyC,GAC9BJ,KAAK,CAACK,SAAN,EAD8B;AAAA;;AAGzCC,EAAAA,iBAAiB,GAAG;AAClB;AACA,QAAIC,KAAK,GAAG,KAAKC,KAAL,CAAWD,KAAvB;AACAA,IAAAA,KAAK,GAAGA,KAAK,CAACE,KAAN,CAAY,OAAZ,EAAqBC,MAArB,CAA6BC,KAAD,IAAW;AAC7C,aAAOA,KAAK,CAACC,QAAN,CAAe,GAAf,KAAuBD,KAAK,CAACE,MAAN,GAAe,CAA7C;AACD,KAFO,CAAR;AAGAN,IAAAA,KAAK,CAACO,KAAN,GANkB,CAOlB;;AACA,QAAIC,QAAQ,GAAG,EAAf;AACA,QAAIC,UAAU,GAAG,EAAjB;AACA,QAAIC,OAAO,GAAG,CAAd;AACA,QAAIC,UAAU,GAAG,CAAjB;AACA,QAAIC,aAAa,GAAG,CAApB;AACAZ,IAAAA,KAAK,CAACa,OAAN,CAAeT,KAAD,IAAW;AACvB,UAAGM,OAAO,GAAGC,UAAV,KAAyB,CAA5B,EAA+B;AAC7BA,QAAAA,UAAU,IAAI,CAAd;AACAF,QAAAA,UAAU,CAACK,CAAX,GAAeV,KAAf;AACD;;AACD,UAAGM,OAAO,GAAGE,aAAV,KAA4B,CAA/B,EAAkC;AAChCA,QAAAA,aAAa,IAAI,CAAjB;AACAH,QAAAA,UAAU,CAACM,CAAX,GAAeX,KAAf;AACAI,QAAAA,QAAQ,CAACQ,IAAT,CAAcP,UAAd;AACD;;AACDC,MAAAA,OAAO;AACR,KAXD;AAYAO,IAAAA,OAAO,CAACC,GAAR,CAAYV,QAAZ;AACE,UAAMW,UAAU,GAAG,KAAKtB,QAAL,CAAcuB,OAAd,CAAsBC,UAAtB,CAAiC,IAAjC,CAAnB;AAEA,QAAI1B,KAAJ,CAAUwB,UAAV,EAAsB;AAClBG,MAAAA,IAAI,EAAE,SADY;AAElBC,MAAAA,IAAI,EAAE;AACFC,QAAAA,QAAQ,EAAE,CACN,EADM;AADR,OAFY;AASlBC,MAAAA,OAAO,EAAE;AACLC,QAAAA,MAAM,EAAE;AACNC,UAAAA,KAAK,EAAE,CAAC;AACNC,YAAAA,OAAO,EAAE,IADH;AAENN,YAAAA,IAAI,EAAE;AAFA,WAAD,CADD;AAKNO,UAAAA,KAAK,EAAE,CAAC;AACND,YAAAA,OAAO,EAAE,IADH;AAENN,YAAAA,IAAI,EAAE;AAFA,WAAD;AALD;AADH;AATS,KAAtB;AAsBH;;AACDQ,EAAAA,MAAM,GAAG;AACL,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AACI,MAAA,EAAE,EAAC,SADP;AAEI,MAAA,GAAG,EAAE,KAAKjC,QAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ;AAQH;;AA/DwC","sourcesContent":["import React, { Component } from 'react'\nimport Chart from \"chart.js\";\n\n\nexport default class Graph extends Component {\n    chartRef = React.createRef();\n\n    componentDidMount() {\n      // filter out data that will not be graphed\n      let graph = this.props.graph\n      graph = graph.split(/(\\s+)/).filter((value) => {\n        return value.includes(\"e\") && value.length > 6\n      })\n      graph.shift()\n      // extract data that will be graphed\n      let data_set = []\n      let data_point = {}\n      let counter = 0\n      let nu_counter = 0\n      let total_counter = 6\n      graph.forEach((value) => {\n        if(counter - nu_counter === 0) {\n          nu_counter += 9\n          data_point.x = value\n        }\n        if(counter - total_counter === 0) {\n          total_counter += 9\n          data_point.y = value\n          data_set.push(data_point)\n        }\n        counter ++\n      })\n      console.log(data_set)\n        const myChartRef = this.chartRef.current.getContext(\"2d\");\n\n        new Chart(myChartRef, {\n            type: \"scatter\",\n            data: {\n                datasets: [\n                    {\n                      \n                    }\n                ]\n            },\n            options: {\n                scales: {\n                  xAxes: [{\n                    display: true,\n                    type: 'logarithmic'\n                  }],\n                  yAxes: [{\n                    display: true,\n                    type: 'logarithmic'\n                  }]\n                }\n            }\n        });\n    }\n    render() {\n        return (\n            <div >\n                <canvas\n                    id=\"myChart\"\n                    ref={this.chartRef}\n                />\n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}