{"ast":null,"code":"var _jsxFileName = \"/Users/amethyst/black-hole-viewer/src/components/Graph.js\";\nimport React, { Component } from 'react';\nimport Chart from \"chart.js\";\nexport default class Graph extends Component {\n  constructor(...args) {\n    super(...args);\n    this.chartRef = React.createRef();\n  }\n\n  componentDidMount() {\n    // filter out data that will not be graphed\n    let graph = this.props.graph;\n    graph = graph.split(/(\\s+)/).filter(value => {\n      return value.includes(\"e\") && value.length > 6;\n    });\n    graph.shift(); // extract data that will be graphed\n\n    let data_set = [];\n    let data_point = {};\n    let counter = 0;\n    let nu_counter = 0;\n    let total_counter = 6;\n    graph.forEach(value => {\n      if (counter - nu_counter === 0) {\n        nu_counter += 9;\n        data_point.x = Number(value);\n      }\n\n      if (counter - total_counter === 0) {\n        total_counter += 9;\n        data_point.y = Number(value);\n        data_set.push(data_point);\n      }\n\n      counter++;\n    });\n    console.log(data_set);\n    const myChartRef = this.chartRef.current.getContext(\"2d\");\n    Chart.Scatter(myChartRef, {\n      data: scatterChartData,\n      options: {\n        title: {\n          display: true,\n          text: 'Chart.js Scatter Chart - Logarithmic X-Axis'\n        },\n        scales: {\n          xAxes: [{\n            type: 'logarithmic',\n            position: 'bottom',\n            ticks: {\n              userCallback: function (tick) {\n                var remain = tick / Math.pow(10, Math.floor(Chart.helpers.log10(tick)));\n\n                if (remain === 1 || remain === 2 || remain === 5) {\n                  return tick.toString() + 'Hz';\n                }\n\n                return '';\n              }\n            },\n            scaleLabel: {\n              labelString: 'Frequency',\n              display: true\n            }\n          }],\n          yAxes: [{\n            type: 'linear',\n            ticks: {\n              userCallback: function (tick) {\n                return tick.toString() + 'dB';\n              }\n            },\n            scaleLabel: {\n              labelString: 'Voltage',\n              display: true\n            }\n          }]\n        }\n      }\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(\"canvas\", {\n      id: \"myChart\",\n      ref: this.chartRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }));\n  }\n\n}\nvar color = Chart.helpers.color;\nvar scatterChartData = {\n  datasets: [{\n    borderColor: window.chartColors.red,\n    backgroundColor: color(window.chartColors.red).alpha(0.5).rgbString(),\n    label: 'V(node2)',\n    data: []\n  }]\n};\n\nwindow.onload = function () {\n  var ctx = document.getElementById('canvas').getContext('2d');\n  window.myScatter = Chart.Scatter(ctx, {\n    data: scatterChartData,\n    options: {\n      title: {\n        display: true,\n        text: 'Chart.js Scatter Chart - Logarithmic X-Axis'\n      },\n      scales: {\n        xAxes: [{\n          type: 'logarithmic',\n          position: 'bottom',\n          ticks: {\n            userCallback: function (tick) {\n              var remain = tick / Math.pow(10, Math.floor(Chart.helpers.log10(tick)));\n\n              if (remain === 1 || remain === 2 || remain === 5) {\n                return tick.toString() + 'Hz';\n              }\n\n              return '';\n            }\n          },\n          scaleLabel: {\n            labelString: 'Frequency',\n            display: true\n          }\n        }],\n        yAxes: [{\n          type: 'linear',\n          ticks: {\n            userCallback: function (tick) {\n              return tick.toString() + 'dB';\n            }\n          },\n          scaleLabel: {\n            labelString: 'Voltage',\n            display: true\n          }\n        }]\n      }\n    }\n  });\n};","map":{"version":3,"sources":["/Users/amethyst/black-hole-viewer/src/components/Graph.js"],"names":["React","Component","Chart","Graph","chartRef","createRef","componentDidMount","graph","props","split","filter","value","includes","length","shift","data_set","data_point","counter","nu_counter","total_counter","forEach","x","Number","y","push","console","log","myChartRef","current","getContext","Scatter","data","scatterChartData","options","title","display","text","scales","xAxes","type","position","ticks","userCallback","tick","remain","Math","pow","floor","helpers","log10","toString","scaleLabel","labelString","yAxes","render","color","datasets","borderColor","window","chartColors","red","backgroundColor","alpha","rgbString","label","onload","ctx","document","getElementById","myScatter"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Chart from \"chart.js\";\n\n\nexport default class Graph extends Component {\n    chartRef = React.createRef();\n\n    componentDidMount() {\n      // filter out data that will not be graphed\n      let graph = this.props.graph\n      graph = graph.split(/(\\s+)/).filter((value) => {\n        return value.includes(\"e\") && value.length > 6\n      })\n      graph.shift()\n      // extract data that will be graphed\n      let data_set = []\n      let data_point = {}\n      let counter = 0\n      let nu_counter = 0\n      let total_counter = 6\n      graph.forEach((value) => {\n        if(counter - nu_counter === 0) {\n          nu_counter += 9\n          data_point.x = Number(value)\n        }\n        if(counter - total_counter === 0) {\n          total_counter += 9\n          data_point.y = Number(value)\n          data_set.push(data_point)\n        }\n        counter ++\n      })\n      console.log(data_set)\n        const myChartRef = this.chartRef.current.getContext(\"2d\");\n\n        Chart.Scatter(myChartRef, {\n    \t\t\tdata: scatterChartData,\n    \t\t\toptions: {\n    \t\t\t\ttitle: {\n    \t\t\t\t\tdisplay: true,\n    \t\t\t\t\ttext: 'Chart.js Scatter Chart - Logarithmic X-Axis'\n    \t\t\t\t},\n    \t\t\t\tscales: {\n    \t\t\t\t\txAxes: [{\n    \t\t\t\t\t\ttype: 'logarithmic',\n    \t\t\t\t\t\tposition: 'bottom',\n    \t\t\t\t\t\tticks: {\n    \t\t\t\t\t\t\tuserCallback: function(tick) {\n    \t\t\t\t\t\t\t\tvar remain = tick / (Math.pow(10, Math.floor(Chart.helpers.log10(tick))));\n    \t\t\t\t\t\t\t\tif (remain === 1 || remain === 2 || remain === 5) {\n    \t\t\t\t\t\t\t\t\treturn tick.toString() + 'Hz';\n    \t\t\t\t\t\t\t\t}\n    \t\t\t\t\t\t\t\treturn '';\n    \t\t\t\t\t\t\t},\n    \t\t\t\t\t\t},\n    \t\t\t\t\t\tscaleLabel: {\n    \t\t\t\t\t\t\tlabelString: 'Frequency',\n    \t\t\t\t\t\t\tdisplay: true,\n    \t\t\t\t\t\t}\n    \t\t\t\t\t}],\n    \t\t\t\t\tyAxes: [{\n    \t\t\t\t\t\ttype: 'linear',\n    \t\t\t\t\t\tticks: {\n    \t\t\t\t\t\t\tuserCallback: function(tick) {\n    \t\t\t\t\t\t\t\treturn tick.toString() + 'dB';\n    \t\t\t\t\t\t\t}\n    \t\t\t\t\t\t},\n    \t\t\t\t\t\tscaleLabel: {\n    \t\t\t\t\t\t\tlabelString: 'Voltage',\n    \t\t\t\t\t\t\tdisplay: true\n    \t\t\t\t\t\t}\n    \t\t\t\t\t}]\n    \t\t\t\t}\n    \t\t\t}\n    \t\t});\n    }\n    render() {\n        return (\n            <div >\n                <canvas\n                    id=\"myChart\"\n                    ref={this.chartRef}\n                />\n            </div>\n        )\n    }\n}\n\n\n\tvar color = Chart.helpers.color;\n\tvar scatterChartData = {\n\t\tdatasets: [{\n\t\t\tborderColor: window.chartColors.red,\n\t\t\tbackgroundColor: color(window.chartColors.red).alpha(0.5).rgbString(),\n\t\t\tlabel: 'V(node2)',\n\t\t\tdata: []\n\t\t}]\n\t};\n\n\twindow.onload = function() {\n\t\tvar ctx = document.getElementById('canvas').getContext('2d');\n\t\twindow.myScatter = Chart.Scatter(ctx, {\n\t\t\tdata: scatterChartData,\n\t\t\toptions: {\n\t\t\t\ttitle: {\n\t\t\t\t\tdisplay: true,\n\t\t\t\t\ttext: 'Chart.js Scatter Chart - Logarithmic X-Axis'\n\t\t\t\t},\n\t\t\t\tscales: {\n\t\t\t\t\txAxes: [{\n\t\t\t\t\t\ttype: 'logarithmic',\n\t\t\t\t\t\tposition: 'bottom',\n\t\t\t\t\t\tticks: {\n\t\t\t\t\t\t\tuserCallback: function(tick) {\n\t\t\t\t\t\t\t\tvar remain = tick / (Math.pow(10, Math.floor(Chart.helpers.log10(tick))));\n\t\t\t\t\t\t\t\tif (remain === 1 || remain === 2 || remain === 5) {\n\t\t\t\t\t\t\t\t\treturn tick.toString() + 'Hz';\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn '';\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tscaleLabel: {\n\t\t\t\t\t\t\tlabelString: 'Frequency',\n\t\t\t\t\t\t\tdisplay: true,\n\t\t\t\t\t\t}\n\t\t\t\t\t}],\n\t\t\t\t\tyAxes: [{\n\t\t\t\t\t\ttype: 'linear',\n\t\t\t\t\t\tticks: {\n\t\t\t\t\t\t\tuserCallback: function(tick) {\n\t\t\t\t\t\t\t\treturn tick.toString() + 'dB';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\tscaleLabel: {\n\t\t\t\t\t\t\tlabelString: 'Voltage',\n\t\t\t\t\t\t\tdisplay: true\n\t\t\t\t\t\t}\n\t\t\t\t\t}]\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n"]},"metadata":{},"sourceType":"module"}