{"ast":null,"code":"var _jsxFileName = \"/Users/amethyst/black-hole-viewer/src/components/Graph.js\";\nimport React, { Component } from 'react';\n\nlet CanvasJSReact = require('./canvasjs.react');\n\nlet CanvasJS = CanvasJSReact.CanvasJS;\nlet CanvasJSChart = CanvasJSReact.CanvasJSChart;\nexport default class Graph extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: []\n    };\n  }\n\n  componentDidMount() {\n    // filter out data that will not be graphed\n    let graph = this.props.graph;\n    graph = graph.split(/(\\s+)/).filter(value => {\n      return value.includes(\"e\") && value.length > 6;\n    });\n    graph.shift(); // extract data that will be graphed\n\n    let data_set = [];\n    let data_point = {};\n    let counter = 0;\n    let nu_counter = 0;\n    let total_counter = 6;\n    graph.forEach(value => {\n      if (counter - nu_counter === 0) {\n        nu_counter += 9;\n        data_point.x = Number(value);\n      }\n\n      if (counter - total_counter === 0) {\n        total_counter += 9;\n        data_point.y = Number(value);\n        data_set.push(data_point);\n      }\n\n      counter++;\n    });\n    console.log(data_set);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, React.createElement(\"canvas\", {\n      id: \"myChart\",\n      ref: this.chartRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/amethyst/black-hole-viewer/src/components/Graph.js"],"names":["React","Component","CanvasJSReact","require","CanvasJS","CanvasJSChart","Graph","state","data","componentDidMount","graph","props","split","filter","value","includes","length","shift","data_set","data_point","counter","nu_counter","total_counter","forEach","x","Number","y","push","console","log","render","chartRef"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AACA,IAAIC,aAAa,GAAGC,OAAO,CAAC,kBAAD,CAA3B;;AACA,IAAIC,QAAQ,GAAGF,aAAa,CAACE,QAA7B;AACA,IAAIC,aAAa,GAAGH,aAAa,CAACG,aAAlC;AAEA,eAAe,MAAMC,KAAN,SAAoBL,SAApB,CAA8B;AAAA;AAAA;AAAA,SACzCM,KADyC,GACjC;AACNC,MAAAA,IAAI,EAAE;AADA,KADiC;AAAA;;AAKzCC,EAAAA,iBAAiB,GAAG;AAClB;AACA,QAAIC,KAAK,GAAG,KAAKC,KAAL,CAAWD,KAAvB;AACAA,IAAAA,KAAK,GAAGA,KAAK,CAACE,KAAN,CAAY,OAAZ,EAAqBC,MAArB,CAA6BC,KAAD,IAAW;AAC7C,aAAOA,KAAK,CAACC,QAAN,CAAe,GAAf,KAAuBD,KAAK,CAACE,MAAN,GAAe,CAA7C;AACD,KAFO,CAAR;AAGAN,IAAAA,KAAK,CAACO,KAAN,GANkB,CAOlB;;AACA,QAAIC,QAAQ,GAAG,EAAf;AACA,QAAIC,UAAU,GAAG,EAAjB;AACA,QAAIC,OAAO,GAAG,CAAd;AACA,QAAIC,UAAU,GAAG,CAAjB;AACA,QAAIC,aAAa,GAAG,CAApB;AACAZ,IAAAA,KAAK,CAACa,OAAN,CAAeT,KAAD,IAAW;AACvB,UAAGM,OAAO,GAAGC,UAAV,KAAyB,CAA5B,EAA+B;AAC7BA,QAAAA,UAAU,IAAI,CAAd;AACAF,QAAAA,UAAU,CAACK,CAAX,GAAeC,MAAM,CAACX,KAAD,CAArB;AACD;;AACD,UAAGM,OAAO,GAAGE,aAAV,KAA4B,CAA/B,EAAkC;AAChCA,QAAAA,aAAa,IAAI,CAAjB;AACAH,QAAAA,UAAU,CAACO,CAAX,GAAeD,MAAM,CAACX,KAAD,CAArB;AACAI,QAAAA,QAAQ,CAACS,IAAT,CAAcR,UAAd;AACD;;AACDC,MAAAA,OAAO;AACR,KAXD;AAYAQ,IAAAA,OAAO,CAACC,GAAR,CAAYX,QAAZ;AACD;;AACDY,EAAAA,MAAM,GAAG;AACL,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AACI,MAAA,EAAE,EAAC,SADP;AAEI,MAAA,GAAG,EAAE,KAAKC,QAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ;AAQH;;AAzCwC","sourcesContent":["import React, { Component } from 'react'\nlet CanvasJSReact = require('./canvasjs.react');\nlet CanvasJS = CanvasJSReact.CanvasJS;\nlet CanvasJSChart = CanvasJSReact.CanvasJSChart;\n\nexport default class Graph extends Component {\n    state = {\n      data: []\n    }\n\n    componentDidMount() {\n      // filter out data that will not be graphed\n      let graph = this.props.graph\n      graph = graph.split(/(\\s+)/).filter((value) => {\n        return value.includes(\"e\") && value.length > 6\n      })\n      graph.shift()\n      // extract data that will be graphed\n      let data_set = []\n      let data_point = {}\n      let counter = 0\n      let nu_counter = 0\n      let total_counter = 6\n      graph.forEach((value) => {\n        if(counter - nu_counter === 0) {\n          nu_counter += 9\n          data_point.x = Number(value)\n        }\n        if(counter - total_counter === 0) {\n          total_counter += 9\n          data_point.y = Number(value)\n          data_set.push(data_point)\n        }\n        counter ++\n      })\n      console.log(data_set)\n    }\n    render() {\n        return (\n            <div >\n                <canvas\n                    id=\"myChart\"\n                    ref={this.chartRef}\n                />\n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}