{"ast":null,"code":"var _jsxFileName = \"/Users/amethyst/black-hole-viewer/src/components/Graph.js\";\nimport React, { Component } from 'react';\n\nlet CanvasJSReact = require('./canvasjs.react');\n\nexport default class Graph extends Component {\n  constructor(...args) {\n    super(...args);\n    this.chartRef = React.createRef();\n  }\n\n  componentDidMount() {\n    // filter out data that will not be graphed\n    let graph = this.props.graph;\n    graph = graph.split(/(\\s+)/).filter(value => {\n      return value.includes(\"e\") && value.length > 6;\n    });\n    graph.shift(); // extract data that will be graphed\n\n    let data_set = [];\n    let data_point = {};\n    let counter = 0;\n    let nu_counter = 0;\n    let total_counter = 6;\n    graph.forEach(value => {\n      if (counter - nu_counter === 0) {\n        nu_counter += 9;\n        data_point.x = Number(value);\n      }\n\n      if (counter - total_counter === 0) {\n        total_counter += 9;\n        data_point.y = Number(value);\n        data_set.push(data_point);\n      }\n\n      counter++;\n    });\n    console.log(data_set);\n    const myChartRef = this.chartRef.current.getContext(\"2d\");\n    new Chart(myChartRef, {\n      type: 'scatter',\n      data: {\n        datasets: [{\n          label: 'Scatter Dataset',\n          data: [...data_set, {\n            x: -10,\n            y: 0\n          }, {\n            x: 0,\n            y: 10\n          }, {\n            x: 10,\n            y: 5\n          }]\n        }]\n      },\n      options: {\n        scales: {\n          xAxes: [{\n            type: 'logarithmic',\n            position: 'bottom'\n          }]\n        }\n      }\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(\"canvas\", {\n      id: \"myChart\",\n      ref: this.chartRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }));\n  }\n\n} // var color = Chart.helpers.color;\n// var scatterChartData = {\n// \tdatasets: [{\n// \t\tborderColor: window.chartColors.red,\n// \t\tbackgroundColor: color(window.chartColors.red).alpha(0.5).rgbString(),\n// \t\tlabel: 'V(node2)',\n// \t\tdata: []\n// \t}]\n// };\n//\n// window.onload = function() {\n// \tvar ctx = document.getElementById('canvas').getContext('2d');\n// \twindow.myScatter = Chart.Scatter(ctx, {\n// \t\tdata: scatterChartData,\n// \t\toptions: {\n// \t\t\ttitle: {\n// \t\t\t\tdisplay: true,\n// \t\t\t\ttext: 'Chart.js Scatter Chart - Logarithmic X-Axis'\n// \t\t\t},\n// \t\t\tscales: {\n// \t\t\t\txAxes: [{\n// \t\t\t\t\ttype: 'logarithmic',\n// \t\t\t\t\tposition: 'bottom',\n// \t\t\t\t\tticks: {\n// \t\t\t\t\t\tuserCallback: function(tick) {\n// \t\t\t\t\t\t\tvar remain = tick / (Math.pow(10, Math.floor(Chart.helpers.log10(tick))));\n// \t\t\t\t\t\t\tif (remain === 1 || remain === 2 || remain === 5) {\n// \t\t\t\t\t\t\t\treturn tick.toString() + 'Hz';\n// \t\t\t\t\t\t\t}\n// \t\t\t\t\t\t\treturn '';\n// \t\t\t\t\t\t},\n// \t\t\t\t\t},\n// \t\t\t\t\tscaleLabel: {\n// \t\t\t\t\t\tlabelString: 'Frequency',\n// \t\t\t\t\t\tdisplay: true,\n// \t\t\t\t\t}\n// \t\t\t\t}],\n// \t\t\t\tyAxes: [{\n// \t\t\t\t\ttype: 'linear',\n// \t\t\t\t\tticks: {\n// \t\t\t\t\t\tuserCallback: function(tick) {\n// \t\t\t\t\t\t\treturn tick.toString() + 'dB';\n// \t\t\t\t\t\t}\n// \t\t\t\t\t},\n// \t\t\t\t\tscaleLabel: {\n// \t\t\t\t\t\tlabelString: 'Voltage',\n// \t\t\t\t\t\tdisplay: true\n// \t\t\t\t\t}\n// \t\t\t\t}]\n// \t\t\t}\n// \t\t}\n// \t});\n// };","map":{"version":3,"sources":["/Users/amethyst/black-hole-viewer/src/components/Graph.js"],"names":["React","Component","CanvasJSReact","require","Graph","chartRef","createRef","componentDidMount","graph","props","split","filter","value","includes","length","shift","data_set","data_point","counter","nu_counter","total_counter","forEach","x","Number","y","push","console","log","myChartRef","current","getContext","Chart","type","data","datasets","label","options","scales","xAxes","position","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nlet CanvasJSReact = require('./canvasjs.react');\n\n\nexport default class Graph extends Component {\n    chartRef = React.createRef();\n\n    componentDidMount() {\n      // filter out data that will not be graphed\n      let graph = this.props.graph\n      graph = graph.split(/(\\s+)/).filter((value) => {\n        return value.includes(\"e\") && value.length > 6\n      })\n      graph.shift()\n      // extract data that will be graphed\n      let data_set = []\n      let data_point = {}\n      let counter = 0\n      let nu_counter = 0\n      let total_counter = 6\n      graph.forEach((value) => {\n        if(counter - nu_counter === 0) {\n          nu_counter += 9\n          data_point.x = Number(value)\n        }\n        if(counter - total_counter === 0) {\n          total_counter += 9\n          data_point.y = Number(value)\n          data_set.push(data_point)\n        }\n        counter ++\n      })\n      console.log(data_set)\n        const myChartRef = this.chartRef.current.getContext(\"2d\");\n\n        new Chart(myChartRef, {\n    type: 'scatter',\n    data: {\n        datasets: [{\n            label: 'Scatter Dataset',\n            data: [...data_set, {\n                x: -10,\n                y: 0\n            }, {\n                x: 0,\n                y: 10\n            }, {\n                x: 10,\n                y: 5\n            }]\n        }]\n    },\n    options: {\n        scales: {\n            xAxes: [{\n                type: 'logarithmic',\n                position: 'bottom'\n            }]\n        }\n    }\n      });\n    }\n    render() {\n        return (\n            <div >\n                <canvas\n                    id=\"myChart\"\n                    ref={this.chartRef}\n                />\n            </div>\n        )\n    }\n}\n\n\n\t// var color = Chart.helpers.color;\n\t// var scatterChartData = {\n\t// \tdatasets: [{\n\t// \t\tborderColor: window.chartColors.red,\n\t// \t\tbackgroundColor: color(window.chartColors.red).alpha(0.5).rgbString(),\n\t// \t\tlabel: 'V(node2)',\n\t// \t\tdata: []\n\t// \t}]\n\t// };\n  //\n\t// window.onload = function() {\n\t// \tvar ctx = document.getElementById('canvas').getContext('2d');\n\t// \twindow.myScatter = Chart.Scatter(ctx, {\n\t// \t\tdata: scatterChartData,\n\t// \t\toptions: {\n\t// \t\t\ttitle: {\n\t// \t\t\t\tdisplay: true,\n\t// \t\t\t\ttext: 'Chart.js Scatter Chart - Logarithmic X-Axis'\n\t// \t\t\t},\n\t// \t\t\tscales: {\n\t// \t\t\t\txAxes: [{\n\t// \t\t\t\t\ttype: 'logarithmic',\n\t// \t\t\t\t\tposition: 'bottom',\n\t// \t\t\t\t\tticks: {\n\t// \t\t\t\t\t\tuserCallback: function(tick) {\n\t// \t\t\t\t\t\t\tvar remain = tick / (Math.pow(10, Math.floor(Chart.helpers.log10(tick))));\n\t// \t\t\t\t\t\t\tif (remain === 1 || remain === 2 || remain === 5) {\n\t// \t\t\t\t\t\t\t\treturn tick.toString() + 'Hz';\n\t// \t\t\t\t\t\t\t}\n\t// \t\t\t\t\t\t\treturn '';\n\t// \t\t\t\t\t\t},\n\t// \t\t\t\t\t},\n\t// \t\t\t\t\tscaleLabel: {\n\t// \t\t\t\t\t\tlabelString: 'Frequency',\n\t// \t\t\t\t\t\tdisplay: true,\n\t// \t\t\t\t\t}\n\t// \t\t\t\t}],\n\t// \t\t\t\tyAxes: [{\n\t// \t\t\t\t\ttype: 'linear',\n\t// \t\t\t\t\tticks: {\n\t// \t\t\t\t\t\tuserCallback: function(tick) {\n\t// \t\t\t\t\t\t\treturn tick.toString() + 'dB';\n\t// \t\t\t\t\t\t}\n\t// \t\t\t\t\t},\n\t// \t\t\t\t\tscaleLabel: {\n\t// \t\t\t\t\t\tlabelString: 'Voltage',\n\t// \t\t\t\t\t\tdisplay: true\n\t// \t\t\t\t\t}\n\t// \t\t\t\t}]\n\t// \t\t\t}\n\t// \t\t}\n\t// \t});\n\t// };\n"]},"metadata":{},"sourceType":"module"}