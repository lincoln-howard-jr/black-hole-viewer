{"version":3,"sources":["components/Lines.js","components/Form.js","components/Graph.js","components/GraphContainer.js","App.js","serviceWorker.js","index.js"],"names":["Lines","renderList","index","selectionWithHeader","props","selection","map","value","comFile","data","splice","sort","a","b","Number","List","divided","relaxed","style","this","item","Item","key","Header","Description","Component","Form","state","agn","z","n","r","nh","handleChange","e","setState","target","id","handleClick","updateApp","Input","onChange","label","placeholder","padding","Button","onClick","margin","width","height","Graph","chartType","loader","options","intervals","legend","chartArea","hAxis","title","scaleType","format","vAxis","GraphContainer","as","href","graphFile","download","App","filter","parseFloat","length","console","log","file","fileName","setData","zeros","repeat","xhr","XMLHttpRequest","open","responseType","onload","readyState","DONE","graphContents","responseText","status","extractData","send","graph","split","includes","data_set","data_point","counter","nu_counter","total_counter","max_x","min_x","min_y","max_y","forEach","x","y","push","Papa","parse","complete","results","Grid","container","columns","stackable","Column","textAlign","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.865cd121.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {List} from 'semantic-ui-react'\n\n\nclass Lines extends Component {\n\n  // Fromat selection to display top 50 brightest lines\n  renderList = () => {\n    let index = 0\n    let selectionWithHeader = this.props.selection.map((value) => {\n      index += 1\n      return [this.props.comFile.data[0][index - 1], value]\n    })\n    selectionWithHeader.splice(0, 7)\n    selectionWithHeader = selectionWithHeader.sort((a, b) => {\n      return Number(b[1]) - Number(a[1])\n    }).splice(0,49)\n    return selectionWithHeader\n  }\n\n  render() {\n    return (\n      <List divided relaxed style={{\"paddingTop\": \"30px\"}}>\n      {this.renderList().map((item) => {\n        return <List.Item key={item[0]}>\n        <List.Header>{item[0]}</List.Header>\n        <List.Description >{item[1]}</List.Description>\n        </List.Item>\n      })}\n  </List>\n    );\n  }\n\n}\n\nexport default Lines;\n","import React, { Component } from 'react';\nimport { Input, Button } from 'semantic-ui-react'\n\nclass Form extends Component {\n  state = {\n    agn: \"5\", // index 1\n    z: \"0.1\", // index 2\n    n: \"300\", // index 3\n    r: \"19.2\", // index 4\n    nh: \"21\" // index 5,\n  }\n\n  handleChange = (e) => {\n    this.setState({...this.state, [e.target.id]: e.target.value})\n  }\n\n  handleClick = (e) => {\n    this.props.updateApp(this.state)\n  }\n\n  render() {\n    return (\n      <>\n      <Input onChange={this.handleChange} id='agn' label='AGN' value={this.state.agn} placeholder='' style={{padding: \"5px\"}}/>\n      <br/>\n      <Input onChange={this.handleChange} id='z' label='Z' value={this.state.z} placeholder='' style={{padding: \"5px\"}}/>\n      <br/>\n      <Input onChange={this.handleChange} id='n' label='N' value={this.state.n} placeholder='' style={{padding: \"5px\"}}/>\n      <br/>\n      <Input onChange={this.handleChange} id='r' label='R' value={this.state.r} placeholder='' style={{padding: \"5px\"}}/>\n      <br/>\n      <Input onChange={this.handleChange} id='nh' label='NH' value={this.state.nh} placeholder='' style={{padding: \"5px\"}}/>\n      <br/>\n      <Button onClick={this.handleClick} style={{margin: \"5px\", width: \"154px\", height: \"37px\"}}>\n      Submit\n      </Button>\n      </>\n    );\n  }\n\n}\n\nexport default Form;\n","import React, { Component } from 'react'\nimport Chart from \"react-google-charts\"\n\nexport default class Graph extends Component {\n\n    render() {\n        return (\n            <Chart\n    chartType=\"LineChart\"\n    loader={<div>Loading Chart</div>}\n    data={[\n      ['Cont nu', 'Total'],\n      ...this.props.data\n    ]}\n    options={{\n      intervals: { style: 'sticks' },\n      legend: 'none',\n      chartArea: { width: '75%' },\n      hAxis: {\n        title: 'Cont nu',\n        scaleType: 'log',\n        format: 'scientific'\n      },\n      vAxis: {\n        title: 'Total',\n        scaleType: 'log',\n        format: 'scientific'\n      },\n    }}\n\n  />\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport {Button, Header} from 'semantic-ui-react'\nimport Graph from './Graph'\n\nclass GraphContainer extends Component {\n\n  render() {\n    return (\n      <>\n      <Header as='h3'>\n    Graph {\n      // this.state.toggle ? \"2\" : \"1\"\n    }\n    </Header>\n      {this.props.data === \"\" ? null :\n      <Graph data={this.props.data}/>\n      //   this.state.toggle ?\n      //   <Graph graph={this.state.graph}/> :\n      //   <Graph1 graph={this.state.graph}/>\n      }\n      <a href={this.props.graphFile} download >\n      <Button>\n      Download Configuration File\n      </Button>\n      </a>\n      {//<Button onClick={this.toggleGraph}>\n      //Change Graph\n      //</Button>\n      }\n      </>\n    );\n  }\n\n}\n\nexport default GraphContainer;\n","import React, { Component } from 'react';\nimport Lines from './components/Lines'\nimport Form from './components/Form'\nimport GraphContainer from './components/GraphContainer'\nimport Papa from 'papaparse';\nimport './App.css';\nimport { Grid, Header } from 'semantic-ui-react'\nimport 'semantic-ui-css/semantic.min.css'\n\nclass App extends Component {\n  state = {\n    comFile: null,\n    graphFile: null,\n    selection: [], // Used to display top 50 brightest lines\n    data: [] // Data for graph\n  }\n\n  updateApp = (state) => {\n    let selection = this.state.comFile.data.filter((item) => {\n      return parseFloat(item[1]) === parseFloat(state.agn) && parseFloat(item[2]) === parseFloat(state.z) && parseFloat(item[3]) === parseFloat(state.n) && parseFloat(item[4]) === parseFloat(state.r) && parseFloat(item[5]) === parseFloat(state.nh)\n    })\n    if(selection.length === 0) {\n      // Warn user that input is invalid\n      console.log(\"invalid input\")\n    }else {\n      console.log(\"Graph updated\")\n      // update graph and top 50 brightest lines\n      let file = this.fileName(selection[0])\n      this.setState({...this.state, selection: selection[0], graphFile: file})\n      this.setData(file)\n    }\n  }\n\n  fileName = (selection) => {\n    // Create file name from selection\n    let zeros = 9 - selection[0].length\n    // debugger\n    let file = \"grid\" + \"0\".repeat(zeros) + selection[0]\n    if(selection[2] === \"1\") {\n      file += \"_Z_1_n_\"\n    } else {\n      file += \"_Z_0p1_n_\"\n    }\n    file += selection[3] + \"_\" + selection[1] + \"per.con\"\n    // Set configuration file to state\n    return (\"data/\" + file)\n  }\n\n  setData = file => {\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', file , true);\n    // If specified, responseType must be empty string or \"text\"\n    xhr.responseType = 'text';\n\n    xhr.onload = () => {\n      if (xhr.readyState === xhr.DONE && this.state.graphContents !== xhr.responseText) {\n          if (xhr.status === 200) {\n              this.setState({...this.state, data: this.extractData(xhr.responseText)})\n            }\n          }\n        }\n        xhr.send(null);\n  }\n\n  extractData = graph => {\n    graph = graph.split(/(\\s+)/).filter((value) => {\n      return value.includes(\"e\") && value.length > 6 && !value.includes(\"i\")\n    })\n\n    // extract data that will be graphed\n    let data_set = []\n    let data_point = {}\n    let counter = 0\n    let nu_counter = 0\n    let total_counter = 6\n    let max_x = 0\n    let min_x = graph[0]\n    let min_y = graph[6]\n    let max_y = 0\n    graph.forEach((value) => {\n      if(counter - nu_counter === 0) {\n        nu_counter += 9\n        data_point.x = Number(value)\n        if(Number(value) > max_x) {\n          max_x = Number(value)\n        }\n        if(Number(value) < min_x) {\n          min_x = Number(value)\n        }\n      }\n      if(counter - total_counter === 0) {\n        total_counter += 9\n        data_point.y = Number(value)\n        data_set.push([data_point.x, data_point.y])\n        data_point = {}\n        if(Number(value) > max_y) {\n          max_y = Number(value)\n        }\n        if(Number(value) < min_y) {\n          min_y = Number(value)\n        }\n      }\n      counter ++\n    })\n    return data_set\n  }\n\n\n\n  componentDidMount() {\n    Papa.parse(\"combinedFile.csv\", {\n\tdownload: true,\n\tcomplete: (results) => {\n          this.setState({...this.state, comFile: results})\n\t     }\n    })\n  }\n\n  render() {\n    return (\n      <Grid container columns={3} divided relaxed stackable style={{\"paddingTop\": \"30px\", \"width\":\"100%\"}} id=\"grid-container\">\n        <Grid.Column textAlign='center' id=\"col-1\">\n      <Header as='h3' >\n      Input Form\n      </Header>\n      <Form updateApp={this.updateApp}/>\n        </Grid.Column>\n        <Grid.Column textAlign='center' id=\"col-2\">\n\n      {!this.state.selection.length > 0 ? null : <GraphContainer selection={this.state.selection} data={this.state.data} graphFile={this.state.graphFile}/>\n      }\n        </Grid.Column>\n        <Grid.Column textAlign='center' id=\"col-3\">\n        <Header as='h3'>\n      Top 50 Brightest lines\n      <Lines selection={this.state.selection} comFile={this.state.comFile}/>\n      </Header>\n        </Grid.Column>\n      </Grid>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}